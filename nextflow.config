/*
 * -------------------------------------------------
 *  Nextflow config file for my my hic scaffolding project
 * -------------------------------------------------
 * Default config options for all environments.
 */

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --              GLOBAL DEFAULT PARAMS (used in config)                 -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//
params {
  output_dir = './result/'
  name = false
  email = false
  help = false
  plaintext_email = false
  monochrome_logs = false
  tracedir = "${params.output_dir}/pipeline_info"
  awsqueue = false
  awsregion = 'us-east-1'
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                          CLUSTER OPTIONS                            -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*
process {
  executor='slurm'
  queue = 'defq'
  time = '8h'
  memory = '10GB'
  clusterOptions = '--job-name=hic_proj'
}
*/

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --              Miscellaneous code for the pipeline                    -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

manifest {
  name = 'noname'
  author = 'TBA'
  homePage = 'TBA'
  description = 'TBA'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '0.0.1-dirty'
}

// Create profiles
// profiles {
//  awsbatch { includeConfig 'conf/awsbatch.config' }
//  conda { process.conda = "$baseDir/environment.yml" }
//  debug { process.beforeScript = 'echo $HOSTNAME' }
//  docker { docker.enabled = true }
//  singularity { singularity.enabled = true }
//  test { includeConfig 'conf/test.config' }
// }

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}